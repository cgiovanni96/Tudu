[{"/home/gio/projects/webdev/Tudu/web/src/index.tsx":"1","/home/gio/projects/webdev/Tudu/web/src/Todos.tsx":"2","/home/gio/projects/webdev/Tudu/web/src/generated/graphql.tsx":"3"},{"size":188,"mtime":1606228812614,"results":"4","hashOfConfig":"5"},{"size":667,"mtime":1606233967140,"results":"6","hashOfConfig":"5"},{"size":3112,"mtime":1606321767160,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ak2gmx",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/gio/projects/webdev/Tudu/web/src/index.tsx",[],"/home/gio/projects/webdev/Tudu/web/src/Todos.tsx",[],"/home/gio/projects/webdev/Tudu/web/src/generated/graphql.tsx",["14","15","16"],{"ruleId":"17","severity":1,"message":"18","line":15,"column":12,"nodeType":"19","messageId":"20","endLine":15,"endColumn":15,"suggestions":"21"},{"ruleId":"22","severity":1,"message":"23","line":83,"column":8,"nodeType":"24","messageId":"25","endLine":88,"endColumn":2},{"ruleId":"22","severity":1,"message":"23","line":94,"column":8,"nodeType":"24","messageId":"25","endLine":99,"endColumn":2},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["26","27"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType",{"messageId":"28","fix":"29","desc":"30"},{"messageId":"31","fix":"32","desc":"33"},"suggestUnknown",{"range":"34","text":"35"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"34","text":"36"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[468,471],"unknown","never"]